#ifndef JSVM_h
#define JSVM_h

#ifndef JSVMEXT
#define JSVMEXT DECLSPEC_DLLIMPORT
#endif

#ifdef __LERSTAD__
#import "LFC/LFC.h"
#else
#include "LFC/LFC.h"
#endif

namespace System
{
namespace JSVM
{

enum ActionOp
{
//	ActionNextFrame = 0x04,
//	ActionPrevFrame = 0x05,
//	ActionPlay = 0x06,
//	ActionStop = 0x07,
//	ActionToggleQuality = 0x08,
//	ActionStopSounds = 0x09,
	ActionAdd = 0x0A,
	ActionSubtract = 0x0B,
	ActionMultiply = 0x0C,
	ActionDivide = 0x0D,
	ActionEquals = 0x0E,
	ActionLess = 0x0F,
	ActionAnd = 0x10,
	ActionOr = 0x11,
	ActionNot = 0x12,
	ActionStringEquals = 0x13,
	ActionStringLength = 0x14,
	ActionStringExtract = 0x15,
	ActionPop = 0x17,
	ActionToInteger = 0x18,
	ActionGetVariable = 0x1C,
	ActionSetVariable = 0x1D,
//	ActionSetTarget2 = 0x20,
	ActionStringAdd = 0x21,
	ActionGetProperty = 0x22,
	ActionSetProperty = 0x23,
//	ActionCloneSprite = 0x24,
//	ActionRemoveSprite = 0x25,
	ActionTrace = 0x26,
	ActionStartDrag = 0x27,
	ActionEndDrag = 0x28,
	ActionStringLess = 0x29,
	ActionThrow = 0x2A,
	ActionCastOp = 0x2B,
	ActionImplementsOp = 0x2C,
	ActionRandomNumber = 0x30,
	ActionMBStringLength = 0x31,
	ActionCharToAscii = 0x32,
	ActionAsciiToChar = 0x33,
	ActionGetTime = 0x34,
	ActionMBStringExtract = 0x35,
	ActionMBCharToAscii = 0x36,
	ActionMBAsciiToChar = 0x37,
	ActionDelete = 0x3A,
	ActionDelete2 = 0x3B,
	ActionDefineLocal = 0x3C,
	ActionCallFunction = 0x3D,
	ActionReturn = 0x3E,
	ActionModulo = 0x3F,
	ActionNewObject = 0x40,
	ActionDefineLocal2 = 0x41,
	ActionInitArray = 0x42,
	ActionInitObject = 0x43,
	ActionTypeOf = 0x44,
//	ActionTargetPath = 0x45,
	ActionEnumerate = 0x46,
	ActionAdd2 = 0x47,
	ActionLess2 = 0x48,
	ActionEquals2 = 0x49,
	ActionToNumber = 0x4A,
	ActionToString = 0x4B,
	ActionPushDuplicate = 0x4C,
	ActionStackSwap = 0x4D,
	ActionGetMember = 0x4E,
	ActionSetMember = 0x4F,
	ActionIncrement = 0x50,
	ActionDecrement = 0x51,
	ActionCallMethod = 0x52,
	ActionNewMethod = 0x53,
	ActionInstanceOf = 0x54,
	ActionEnumerate2 = 0x55,
	ActionBitAnd = 0x60,
	ActionBitOr = 0x61,
	ActionBitXor = 0x62,
	ActionBitLShift = 0x63,
	ActionBitRShift = 0x64,
	ActionBitURShift = 0x65,
	ActionStrictEquals = 0x66,
	ActionGreater = 0x67,
	ActionStringGreater = 0x68,
	ActionExtends = 0x69,
//	ActionGotoFrame = 0x81,
//	ActionGetURL = 0x83,
	ActionStoreRegister = 0x87,
	ActionConstantPool = 0x88,
//	ActionWaitForFrame = 0x8A,
//	ActionSetTarget = 0x8B,
//	ActionGoToLabel = 0x8C,
//	ActionWaitForFrame2 = 0x8D,
	ActionDefineFunction2 = 0x8E,
	ActionTry = 0x8F,
	ActionWith = 0x94,
	ActionPush = 0x96,
	ActionJump = 0x99,
//	ActionGetURL2 = 0x9A,
	ActionDefineFunction = 0x9B,
	ActionIf = 0x9D,
	ActionCall = 0x9E,
//	ActionGotoFrame2 = 0x9F,
};

class VM;
class ScriptFunction;

interface IMembersMap
{
	virtual Variant GetMember(StringIn name) = 0;
	virtual void SetMember(StringIn name, Variant value) = 0;
};

class JSVMEXT MembersMap : public IMembersMap
{
public:
	virtual Variant GetMember(StringIn name);
	virtual void SetMember(StringIn name, Variant value);

	map<String, Variant> m_members;
};

/*
class ActionScript2Ext ActionContext : public Object
{
public:
	vector<StkElt> m_constantPool;

//	map<System::StringA*, ActionScriptFunction*, Ref_Less<System::StringA> > m_funmap;
};
*/

class JSVMEXT ConstantPool : public Object
{
public:
	vector<Variant> m_constantPool;
};

class JSVMEXT StackFrame : public Object, public IFrameContext
{
public:
	CTOR StackFrame();

	virtual Variant GetVariable(StringIn name) override;	// IFrameContext

	StackFrame* m_pCaller;
	ubyte* m_instructionsData;
	size_t m_instructionsLength;
	ubyte* m_return_pc;	// TODO, not this ??

//	vector<StkElt> m_constantPool;
	ConstantPool* m_pContext;
	map<String, Variant> m_variables;
};

class JSVMEXT Function : public Object, public IFunction
{
public:
	virtual void dispatch(VM* vm, StackFrame* frame, uint numargs) = 0;
};

class JSVMEXT VM : public Object
{
public:

	CTOR VM();

	bool next();

	void push(const Variant& value);
#ifndef __LERSTAD__
	void push(Variant&& value);
#endif
	Variant pop();

	void CallMethod(Dispatch* pDispatch, void* object, Declarator* pMethod, unsigned int numargs, bool bReturnValue);
	void CallMethod(Dispatch* pDispatch, void* object, Declarator* pMethod, vector<Variant>& argsarr, bool bReturnValue);
	byte* GetArgs(FunctionType* pFun, byte* args, unsigned int numargs);

	void op_notimpl(unsigned int length);
	void op_If(unsigned int length);
	void op_ConstantPool(unsigned int length);
	void op_Push(unsigned int length);
	void op_Pop(unsigned int length);
	void op_NewObject(unsigned int length);
	void op_CallFunction(unsigned int length);
	void op_DefineLocal2(unsigned int length);
	void op_CallMethod(unsigned int length);
	void op_GetVariable(unsigned int length);
	void op_SetVariable(unsigned int length);
	void op_GetMember(unsigned int length);
	void op_SetMember(unsigned int length);
	void op_With(unsigned int length);
	void op_DefineFunction(unsigned int length);
	void op_Less(unsigned int length);
	void op_Less2(unsigned int length);
	void op_Greater(unsigned int length);
	void op_Negate(unsigned int length);
	void op_Add2(unsigned int length);
	void op_Subtract(unsigned int length);
	void op_Multiply(unsigned int length);
	void op_Divide(unsigned int length);
	void op_StringAdd(unsigned int length);
	void op_GetTypeMember(unsigned int length);
	void op_Typeof(unsigned int length);

public:

	typedef void (*BreakpointFunction)(VM* vm, Object* userobject, int cause);
	BreakpointFunction m_breakpoint;
	void (*OnSetVariable)(StackFrame* frame, StringIn varname, const Variant& value);

	Object* m_userobject;
	Object* m_global;
	ubyte* m_pc;

	StackFrame* m_pFrame;

	vector<Variant> m_stack;

	DWORD m_flags;
	int m_level;
	DWORD m_gui_threadId;

	typedef void (VM::*tyasfunc)(unsigned int length);
	static tyasfunc asfuncs[256];
};

class JSVMEXT ScriptFunction : public Function
{
public:

	virtual ~ScriptFunction();

	CTOR ScriptFunction();
	CTOR ScriptFunction(StringIn name);
//	CTOR ActionScriptFunction(ecma::Script* script);

	virtual size_t get_NumArgs() override;
	virtual String ToString() override;
	virtual void dispatch(VM* vm, StackFrame* ctx, uint numargs) override;

public:

	map<FunctionType*, void*> m_nativeWrapper;

	String m_name;
	String m_codeAsText;
	ubyte* m_codeData;
	size_t m_codeLength;
	ConstantPool* m_pContext;
	vector<String> m_args;

#ifdef _WIN64
	RUNTIME_FUNCTION m_runTimeFunction;
#endif
};

JSVMEXT void Disasm(ScriptFunction* function);

}	// JSVM
}	// System

#endif // JSVM_h
