#include "stdafx.h"
#include "LSVG.h"

#include "SVGImplementation.h"

#pragma comment(lib, "LFC")
#pragma comment(lib, "Graphics")
#pragma comment(lib, "Imaging")
#pragma comment(lib, "LMedia")
#pragma comment(lib, "GUI")
#pragma comment(lib, "XPath")
#pragma comment(lib, "LXML")
//#pragma comment(lib, "HTML")	// TODO remove
#pragma comment(lib, "EcmaScript")
#pragma comment(lib, "JSVM")
#pragma comment(lib, "Networking")

#pragma comment(lib, "Mscms.lib")

#if _WIN32

//#include <wininet.h>
#pragma comment(lib, "wininet.lib")

//#include <Usp10.h>
//#pragma comment(lib, "Usp10.lib")

#endif

namespace System
{

extern "C" __declspec(dllexport) Object* CreateObject()
{
	return new Web::SVGImplementation;
}

namespace Web
{
ValueHandlerT<SVGEnumerationUnitTypeValue> ValueHandlerT<SVGEnumerationUnitTypeValue>::s_valueHandler;

SVGEXT String GetAsString(double v)
{
	ASSERT(0);
	return NULL;
}

Gui::DependencyClass* SVGVisual::get_Class()
{
	static Gui::DependencyClass depclass(typeid(SVGVisual), Gui::FrameworkElement::get_Class());

	/*
	static Gui::DependencyProperty* properties[] =
	{
	};
	*/

	return &depclass;
}

Gui::DependencyClass* SVGVisual::pClass(get_Class());

//list<SVGVisual*> arrangeList;

SVGVisual::SVGVisual() : Gui::FrameworkElement(get_Class())
{
}

void SVGVisual::Load(StringIn url)
{
	Web::CHTMLWindow* svgwindow;

	svgwindow = new Web::CHTMLWindow;
	svgwindow->m_ownerVisual = this;

	Web::SVGDocument* svgdocument = new Web::SVGDocument();
	svgdocument->m_pWindow = svgwindow;

	svgdocument->load(url);

	Web::SVGSVGElement* svgelement = dynamic_cast<Web::SVGSVGElement*>(svgdocument->get_documentElement());
	if (svgelement == NULL)
	{
		raise(Exception("no svg element"));
	}
	Web::PSVGSVGElement* psvgelement = dynamic_cast<Web::PSVGSVGElement*>(svgelement->m_pNode);

	svgwindow->m_htmTree = psvgelement;

	/*
	for (int i = 0; i < svgelement->get_childNodes()->get_length(); i++)
	{
		w3c::Node* child = svgelement->get_childNodes()->item(i);
		psvgelement->m_rchildList.push_back(child->m_pNode);
	}
	*/

	psvgelement->GetCSSPropertiesAndChildren();
//	psvgelement->BuildRenderableChildren();
	psvgelement->SetViewportElement(NULL);
	psvgelement->CalculateBoundsAndChildren();

	this->m_window = svgwindow;
	this->m_document = svgdocument;
	this->m_svgelement = svgelement;
	this->m_psvgelement = psvgelement;
}

void SVGVisual::SetDocument(Web::SVGDocument* svgdocument)
{
	Web::CHTMLWindow* svgwindow;

	svgwindow = new Web::CHTMLWindow;
	svgwindow->m_ownerVisual = this;

//	Web::SVGDocument* svgdocument = new Web::SVGDocument();
	svgdocument->m_pWindow = svgwindow;

//	svgdocument->load(WSTR("../../../TestFiles/image.svg"));
//	svgdocument->load(WSTR("D:/Users/Sigurd/Documents/VSProjects/MMStudio/TestFiles/image.svg"));

	Web::SVGSVGElement* svgelement = dynamic_cast<Web::SVGSVGElement*>(svgdocument->get_documentElement());
	Web::PSVGSVGElement* psvgelement = dynamic_cast<Web::PSVGSVGElement*>(svgelement->m_pNode);

	svgwindow->m_htmTree = psvgelement;

	/*
	for (int i = 0; i < svgelement->get_childNodes()->get_length(); i++)
	{
		w3c::Node* child = svgelement->get_childNodes()->item(i);
		psvgelement->m_rchildList.push_back(child->m_pNode);
	}
	*/

	psvgelement->GetCSSPropertiesAndChildren();
//	psvgelement->BuildRenderableChildren();
	psvgelement->CalculateBoundsAndChildren();

	this->m_window = svgwindow;
	this->m_document = svgdocument;
	this->m_svgelement = svgelement;
	this->m_psvgelement = psvgelement;

//		window->set_Content(svgVisual);
}

void SVGVisual::Render(Gui::ManagedRenderContext renderContext)
{
	CHTMRenderContext ctx;
	ctx.m_renderContext = renderContext.m_p;
	m_psvgelement->Render(&ctx, renderContext.m_p, 1.0, 1.0);
}

void SVGVisual::DoLayout()
{
	gm::SizeD finalSize(get_ActualWidth(), get_ActualHeight());
	m_window->ArrangeOverride(finalSize);
}

void SVGVisual::DoLayoutSize(gm::SizeF size)
{
	m_psvgelement->m_boundsValid = false;
	m_psvgelement->CalculateBoundsAndChildren();

//	m_window->ArrangeOverride(size);
}

void SVGVisual::OnLeftMouseButtonDown(Gui::MouseButtonEventArgs* args)
{
	Gui::Point mousepos = args->GetPosition(this);

	PSVGElement* pElement;
	pElement = m_psvgelement->HitTestElement(gm::Matrix3d::GetIdentity(), gm::PointD(mousepos.X, mousepos.Y));

	if (pElement)
	{
		EventTarget* target = dynamic_cast<EventTarget*>(pElement->m_pNode);
		EventTarget* relatedTarget = dynamic_cast<EventTarget*>(m_psvgelement->m_pNode);

		gm::PointF screenpt;
		gm::PointF clientpt = mousepos;
		UINT nFlags = 0;
		bool m_bAlt = false;
		int iButton = 0;

		//IDocumentEvent* documentEvent = dynamic_cast<IDocumentEvent*>(m_document);

		MouseEvent* mouseevt = static_cast<MouseEvent*>(m_document->createEvent(WSTR("MouseEvents")));
		mouseevt->initMouseEvent(L"mousedown",
			true,	// bubbles
			true,	// cancelable
			m_window,	// viewArg
			0,		// detail
			screenpt.X, screenpt.Y,	// screen
			clientpt.X, clientpt.Y, // client,
			(nFlags & MK_CONTROL)? true: false,
			(nFlags & MK_SHIFT)? true: false,
			(m_bAlt)? true: false,
			0,	// meta
			iButton,
			relatedTarget
			);

		bool doDefault = target->dispatchEvent(mouseevt);
		if (doDefault)
		{
		}
	}
}

}
}

#if 0

/////////////////////////////////////////////////////////////////////////////
// Used to determine whether the DLL can be unloaded by OLE

STDAPI DllCanUnloadNow(void)
{
    return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
}

/////////////////////////////////////////////////////////////////////////////
// Returns a class factory to create an object of the requested type

STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
{
    return _Module.GetClassObject(rclsid, riid, ppv);
}

// {26237DD9-F1D4-49a2-BA2C-6CF570422E6F}
DEFINE_GUID(CATID_LXMLPlugin, 
0x26237dd9, 0xf1d4, 0x49a2, 0xba, 0x2c, 0x6c, 0xf5, 0x70, 0x42, 0x2e, 0x6f);

/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry

STDAPI DllRegisterServer(void)
{
	return E_FAIL;
    // registers object, typelib and all interfaces in typelib
	HRESULT hr = _Module.RegisterServer(TRUE);
	if (FAILED(hr)) return hr;

#if 0
	ICatRegister   *pcr;

	hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr, 
		NULL, 
		CLSCTX_INPROC_SERVER, 
		IID_ICatRegister, 
		(LPVOID*)&pcr);
	
	if(SUCCEEDED(hr))
	{
		{
			CATEGORYINFO catinfo[1];

			catinfo[0].catid = CATID_LXMLPlugin;
			catinfo[0].lcid = 0;
			wcscpy(catinfo[0].szDescription, L"LXML Implementation");

			pcr->RegisterCategories(sizeof(catinfo)/sizeof(CATEGORYINFO), catinfo);
		}

		{
			CATID rgcatid[1];

			rgcatid[0] = CATID_LXMLPlugin;

			hr = pcr->RegisterClassImplCategories(CLSID_LSVGImplementation, 1, rgcatid);
		}

		pcr->Release();
	}
#endif
	return hr;
}

/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry

STDAPI DllUnregisterServer(void)
{
	return E_FAIL;
    return _Module.UnregisterServer(TRUE);
}

#endif
