#include "stdafx.h"
#include "LFC.h"
#include "Variant.h"

namespace System
{

Variant::Variant(const VARIANT& v)
{
	switch (v.vt)
	{
	case VT_EMPTY:
		{
			kind = VARKIND_UNDEFINED;
			m_pObject = NULL;
			m_pType = typeid(void);
		}
		break;

	case VT_NULL:
		{
			kind = VARKIND_NULL;
			m_pObject = NULL;
			m_pType = Types::get_nullType();
		}
		break;

	case VT_UI1:
		{
			kind = VARKIND_UINT8;
			u.uint8_val = v.bVal;
			m_pObject = NULL;
			m_pType = typeid(unsigned char);
		}
		break;

	case VT_I2:
		{
			kind = VARKIND_INT16;
			u.int16_val = v.iVal;
			m_pObject = NULL;
			m_pType = typeid(int16);
		}
		break;

	case VT_UI2:
		{
			kind = VARKIND_UINT16;
			u.uint16_val = v.uiVal;
			m_pObject = NULL;
			m_pType = typeid(uint16);
		}
		break;

	case VT_I4:
		{
			kind = VARKIND_INT32;
			u.int32_val = v.lVal;
			m_pObject = NULL;
			m_pType = typeid(int32);
		}
		break;

	case VT_UI4:
		{
			kind = VARKIND_UINT32;
			u.uint32_val = v.ulVal;
			m_pObject = NULL;
			m_pType = typeid(uint32);
		}
		break;

	case VT_I8:
		{
			kind = VARKIND_INT64;
			u.longlong_val = v.llVal;
			m_pObject = NULL;
			m_pType = typeid(long long);
		}
		break;

	case VT_UI8:
		{
			kind = VARKIND_UINT64;
			u.ulonglong_val = v.ullVal;
			m_pObject = NULL;
			m_pType = typeid(unsigned long long);
		}
		break;

	case VT_INT:
		{
			kind = VARKIND_INT32;
			u.int32_val = v.intVal;
			m_pObject = NULL;
			m_pType = typeid(int);
		}
		break;

	case VT_UINT:
		{
			kind = VARKIND_UINT32;
			u.uint32_val = v.uintVal;
			m_pObject = NULL;
			m_pType = typeid(unsigned int);
		}
		break;

	case VT_R4:
		{
			kind = VARKIND_FLOAT32;
			u.float32_val = v.fltVal;
			m_pObject = NULL;
			m_pType = typeid(float);
		}
		break;

	case VT_R8:
		{
			kind = VARKIND_FLOAT64;
			u.float64_val = v.dblVal;
			m_pObject = NULL;
			m_pType = typeid(double);
		}
		break;

	case VT_BOOL:
		{
			kind = VARKIND_BOOL;
			u.bool_val = (v.boolVal != 0);
			m_pObject = NULL;
			m_pType = typeid(bool);
		}
		break;

	case VT_BSTR:
		{
			ASSERT(0);
		//	UINT len = SysStringLen(v.bstrVal);
			//m_pObject = new ImmutableString<WCHAR>(string_copy(v.bstrVal, len));
		//	m_pType = m_pObject->GetType();
		//	kind = VARKIND_STRINGA;
		}
		break;

	case VT_UNKNOWN:
		{
#undef new
			::new (&m_structptr) ComPtr<IUnknown>(v.punkVal);
#define new _new
			m_pType = typeid(ComPtr<IUnknown>);

			/*
			m_structptr = v.punkVal;
			m_pType = typeid(IUnknown);
			kind = VARKIND_STRINGA;
			*/
		}
		break;

	case VT_DISPATCH:
		{
#undef new
			::new (&m_structptr) ComPtr<IDispatch>(v.pdispVal);
#define new _new
			m_pType = typeid(ComPtr<IDispatch>);
/*
			m_structptr = v.pdispVal;
			m_pType = typeid(IDispatch);
			kind = VARKIND_STRINGA;
			*/
		}
		break;

	default:
		raise(SystemException("VARIANT.vt unsupported"));
	}
}

Variant::Variant(VariantKind _kind)
{
	kind = _kind;
	m_pObject = NULL;
	m_pType = Types::get_nullType();
	ASSERT(m_pType);
}

Variant::Variant(bool value) :
	kind(VARKIND_BOOL),
	m_pObject(NULL),
	m_pType(typeid(value))
{
	ASSERT(m_pType);
	u.bool_val = value;
}

Variant::Variant(signed char lValue)
{
	kind = VARKIND_INT8;
	u.int8_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(unsigned char lValue)
{
	kind = VARKIND_UINT8;
	u.int8_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(short lValue)
{
	kind = VARKIND_INT16;
	u.int16_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(unsigned short lValue)
{
	kind = VARKIND_UINT16;
	u.int16_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(int lValue)
{
	kind = VARKIND_INT32;
	u.int32_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(unsigned int lValue)
{
	kind = VARKIND_UINT32;
	u.int32_val = lValue;
	m_pObject = NULL;
	m_pType = typeid(lValue);
	ASSERT(m_pType);
}

Variant::Variant(long long value)
{
	kind = VARKIND_INT64;
	u.longlong_val = value;
	m_pObject = NULL;
	m_pType = typeid(value);
	ASSERT(m_pType);
}

Variant::Variant(unsigned long long value)
{
	kind = VARKIND_UINT64;
	u.ulonglong_val = value;
	m_pObject = NULL;
	m_pType = typeid(value);
	ASSERT(m_pType);
}

Variant::Variant(float fValue)
{
	kind = VARKIND_FLOAT32;
	u.float32_val = fValue;
	m_pObject = NULL;
	m_pType = typeid(fValue);
	ASSERT(m_pType);
}

Variant::Variant(double fValue)
{
	kind = VARKIND_FLOAT64;
	u.float64_val = fValue;
	m_pObject = NULL;
	m_pType = typeid(fValue);
	ASSERT(m_pType);
}

Variant::Variant(const Variant& other)
{
	kind = other.kind;
	m_pObject = other.m_pObject;
	m_pType = other.m_pType;
	u = other.u;

	if (!other.IsPointer())
	{
		if (other.IsObject())
		{
			void* dst;
			const void* src;
			if (m_pType->get_sizeof() > sizeof(void*))
			{
				m_structptr = new byte[m_pType->get_sizeof()];
				dst = m_structptr;
				src = other.m_structptr;
			}
			else
			{
				dst = &m_structptr;
				src = &other.m_structptr;
			}

			Declarator* copy_ctor = m_pType->GetClass()->GetCopyConstructor();
			if (copy_ctor)
			{
				copy_ctor->void_invoke_method(dst, src);
			}
			else
			{
				memcpy(dst, src, m_pType->get_sizeof());
			}
		}
	}
}

Variant::Variant(Variant&& other)
{
	kind = other.kind;
	m_pObject = other.m_pObject;
	m_pType = other.m_pType;
	u = other.u;

	// reset other
	other.m_pType = typeid(void);
	other.m_pObject = NULL;
	other.kind = VARKIND_UNDEFINED;
}

Variant::Variant(String&& str)
{
	kind = VARKIND_STRUCT;

	m_pObject = str.m_stringObject;
	m_pType = typeid(String);

	str.m_stringObject = NULL;	// reset other
}

Variant::Variant(const String& str)
{
	kind = VARKIND_STRUCT;

#undef new
	::new (&m_structptr) String(str);
#define new _new
	m_pType = typeid(String);
}

Variant::Variant(StringIn str)
{
	kind = VARKIND_STRUCT;
#undef new
	::new (&m_structptr) String(str);
#define new _new
	m_pType = typeid(String);
}

Variant::Variant(const StringBuilderBase& builder)
{
	// TODO: improve, uneccessary IncRef/DecRef ?

	String str = builder.BuildString();
	kind = VARKIND_STRUCT;
#undef new
	::new (&m_structptr) String(str);
#define new _new
	m_pType = typeid(String);
}

Variant::Variant(Object* pObject) : m_pObject(pObject)
{
	if (pObject == NULL)
	{
		kind = VARKIND_NULL;
		m_pType = Types::get_nullType();
	}
	else
	{
		kind = VARKIND_OBJECT;
	//	if (Module::WithinManaged(pObject))
		{
			m_pType = pObject->GetType()->get_pointerToThis();
		}
		/*
		else
		{
			m_pType = pObject->GetType()->get_pointerToThis();
		}
		*/
	}
}

Variant::Variant(const char* str, size_t len)
{
	if (len == ~0) len = strlen(str);

	kind = VARKIND_STRUCT;

#undef new
	::new (&m_structptr) String(string_data<char>(str, len));
#define new _new
	m_pType = typeid(String);
}

Variant::Variant(const wchar_t* str, size_t len)
{
	if (len == ~0) len = wcslen(str);

	kind = VARKIND_STRUCT;
#undef new
	::new (&m_structptr) String(string_data<wchar_t>(str, len));
#define new _new
	m_pType = typeid(String);
}

Variant::Variant(const void* src, Type* pType) : m_pType(pType)
{
	kind = VARKIND_STRUCT;

	ClassType* pClass = pType->GetClass();

	void* dst;
	if (m_pType->get_sizeof() > sizeof(void*))
	{
		m_structptr = new byte[m_pType->get_sizeof()];
		dst = m_structptr;
	}
	else
	{
		dst = &m_structptr;
	}

	Declarator* copy_ctor = m_pType->GetClass()->GetCopyConstructor();
	if (copy_ctor)
	{
		copy_ctor->void_invoke_method(dst, src);
	}
	else
	{
		memcpy(dst, src, m_pType->get_sizeof());
	}
}

Variant::Variant(bool, void* src, Type* pType)
{
	ASSERT(pType->GetPointerTo());

	kind = VARKIND_OBJECT;
	m_pType = pType;
	m_structptr = src;

	if (pType->GetPointerTo())
	{
		if (pType->GetPointerTo()->GetClass()->IsPolymorphic())
		{
			ClassType* pClass;
			m_structptr = LeftMost(src, &pClass);
			m_pType = pClass->get_pointerToThis();
		}
	}
}

Variant::Variant(VariantKind _kind, void* pAnyInterface)
{
	kind = _kind;
	ASSERT(_kind == VARKIND_ANYINTERFACE);
	if (_kind != VARKIND_ANYINTERFACE)
	{
		raise(Exception(L"Variant anyinterface"));
	}

	m_pType = System::GetType(pAnyInterface);
	m_pAnyInterface = (anyinterface*)pAnyInterface;
}

Variant::~Variant()
{
	if (m_pType)
	{
		if (m_pType->GetPointerTo() == NULL)
		{
			ClassType* pClass = m_pType->GetClass();
			if (pClass)
			{
				Declarator* dtor = pClass->GetDestructor();

				if (pClass->get_sizeof() <= sizeof(void*))	// inline
				{
					if (dtor)
					{
						dtor->void_invoke_method(&m_structptr);
					}
				}
				else if (m_structptr)
				{
					// TODO operator delete

					if (dtor)
					{
						dtor->void_invoke_method(m_structptr);
					}
					delete[] m_structptr;
				}
			}
		}

		m_pType = NULL;
	}

	m_structptr = NULL;
}

Type* Variant::GetPtrType() const
{
	if (m_pType == NULL) return NULL;

	Type* pType = m_pType->GetStripped();

	if (Type* p2 = pType->GetPointerTo())
	{
		return p2;
	}
	else
	{
		return pType;
	}
}

bool Variant::IsObject() const throw ()
{
	// pointer/reference to object or struct/class

	if (m_pType == NULL) return false;

	Type* pType = m_pType->GetStripped();
	if (pType->get_Kind() == type_class) return true;

	pType = pType->GetPointerTo();
	if (pType && pType->get_Kind() == type_class) return true;

	return false;
}

ClassType* Variant::GetObjectType() const
{
	if (m_pType == NULL) return NULL;

	Type* pType = m_pType->GetStripped();

	if (Type* p2 = pType->GetPointerTo())
	{
		return p2->GetClass();
	}
	else
	{
		return pType->GetClass();
	}
}

Object* Variant::GetObject() const
{
	Type* pType = m_pType->GetStripped();

	if (Type* pPtr2 = pType->GetPointerTo())
	{
		if (ClassType* pClass = pPtr2->GetClass())
		{
			return m_pObject;
		}
	}
	else if (ClassType* pClass = pType->GetClass())
	{
		if (pClass->get_sizeof() <= sizeof(void*))	// inline
		{
			return (Object*)&m_pObject;
		}
		else
		{
			return m_pObject;
		}
	}

	return NULL;
}

void* Variant::GetPtr() const
{
	Type* pType = m_pType->GetStripped();

	if (Type* pPtr2 = pType->GetPointerTo())
	{
		if (ClassType* pClass = pPtr2->GetClass())
		{
			return m_structptr;
		}
	}
	else if (ClassType* pClass = pType->GetClass())
	{
		if (pClass->get_sizeof() <= sizeof(void*))	// inline
		{
			return (void*)&m_structptr;
		}
		else
		{
			return m_structptr;
		}
	}

	return NULL;
}

Variant& Variant::operator = (const Variant& other)
{
	if (!other.IsPointer() && other.IsObject())
	{
		kind = other.kind;
		m_pType = other.m_pType;

		size_t size = other.GetType()->get_sizeof();
		Declarator* op_assign = other.GetType()->GetClass()->GetCopyAssignOperator();
		if (op_assign)
		{
			if (size <= sizeof(void*))
			{
				op_assign->void_invoke_method(&m_structptr, &other.m_structptr);
			}
			else
			{
				// TODO operator new
				m_structptr = new byte[size];
				op_assign->void_invoke_method(m_structptr, other.m_structptr);
			}
		}
		else
		{
			if (size <= sizeof(void*))
			{
				m_structptr = other.m_structptr;
			}
			else
			{
				// TODO operator new
				m_structptr = new byte[size];
				memcpy(m_structptr, other.m_structptr, size);
			}
		}

		return *this;
	}

	kind = other.kind;
	u = other.u;	// copy the entire record
	m_pObject = other.m_pObject;
	m_pType = other.m_pType;

	return *this;
}

Variant& Variant::operator = (Variant&& other)
{
	kind = other.kind;
	m_pObject = other.m_pObject;
	m_pType = other.m_pType;
	u = other.u;

	other.m_pType = typeid(void);
	other.m_pObject = NULL;
	other.kind = VARKIND_UNDEFINED;

	return *this;
}

Variant::operator String () const
{
	StringObject* str = dynamic_cast<StringObject*>(m_pObject);
	if (str == NULL)
	{
		raise(SystemException(L"Variant has type " + m_pType->ToString() + " instead of String"));
	}
	return str;
}

Variant::operator bool () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to bool"));
	}
}

template<> bool Variant::CanConvertTo<int>() const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
	case type_wchar_t:
	case type_signed_char:
	case type_unsigned_char:
	case type_short:
	case type_unsigned_short:
	case type_int:
#if LONG_MAX == INT_MAX
	case type_long:
#endif
		return true;

	default:
		return false;
	}
}

Variant::operator int () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_wchar_t:
		return u.wchar_val;

	case type_signed_char:
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		return u.int_val;

#if LONG_MAX == INT_MAX
	case type_long:
		return u.long_val;
#endif

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to int"));
	}
}

Variant::operator unsigned int () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_wchar_t:
		return u.wchar_val;

	case type_unsigned_char:
		return u.uint8_val;

	case type_unsigned_short:
		return u.uint16_val;

	case type_unsigned_int:
		return u.uint32_val;

#if ULONG_MAX == UINT_MAX
	case type_unsigned_long:
		return u.ulong_val;
#endif

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to unsigned int"));
	}
}

Variant::operator long () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_wchar_t:
		return u.wchar_val;

	case type_signed_char:
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		return u.int_val;

	case type_long:
		return u.long_val;

#if LONG_MAX == I64_MAX

	case type_unsigned_int:
		return u.uint_val;

	case type_long_long:
		return u.longlong_val;

#endif

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to long"));
	}
}

Variant::operator unsigned long () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_unsigned_int:
		return u.uint_val;

	case type_unsigned_long:
		return u.ulong_val;

#if ULONG_MAX == _UI64_MAX
	case type_unsigned_long_long:
		return u.ulonglong_val;
#endif

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to unsigned long"));
	}
}

Variant::operator long long () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_wchar_t:
		return u.wchar_val;

	case type_signed_char:
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		return u.int_val;

	case type_unsigned_int:
		return u.uint_val;

	case type_long:
		return u.long_val;

#if ULONG_MAX <= _I64_MAX
	case type_unsigned_long:
		return u.ulong_val;
#endif

	case type_long_long:
		return u.longlong_val;

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to long long"));
	}
}

Variant::operator unsigned long long () const
{
	ASSERT(m_pType);

	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_unsigned_int:
		return u.uint_val;

	case type_unsigned_long:
		return u.ulong_val;

	case type_unsigned_long_long:
		return u.ulonglong_val;

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to unsigned long long"));
	}
}

Variant::operator float () const
{
	ASSERT(m_pType);

	switch (m_pType->GetStripped()->get_Kind())
	{
	case type_float:
		return u.float_val;

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to float"));
	}
}

Variant::operator double () const
{
	ASSERT(m_pType);

	switch (m_pType->GetStripped()->get_Kind())
	{
	case type_float:
		return u.float_val;

	case type_double:
		return u.double_val;

	case type_long_double:
		return u.double_val;

	default:
		raise(OverflowException(L"Cannot convert " + m_pType->ToString() + " to double"));
	}
}

bool Variant::ToBool() const
{
	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		if ((u.int8_val & ~1) == 0) return u.int8_val & 1;

	case type_unsigned_char:
		if ((u.uint8_val & ~1) == 0) return u.uint8_val & 1;

	case type_short:
		if ((u.int16_val & ~1) == 0) return u.int16_val & 1;

	case type_unsigned_short:
		if ((u.uint16_val & ~1) == 0) return u.uint16_val & 1;

	case type_int:
		if ((u.int32_val & ~1) == 0) return u.int32_val & 1;

	case type_unsigned_int:
		if ((u.uint32_val & ~1) == 0) return u.uint32_val & 1;

	case type_long:
		if ((u.long_val & ~1) == 0) return u.long_val & 1;

	case type_unsigned_long:
		if ((u.ulong_val & ~1) == 0) return u.ulong_val & 1;

	case type_long_long:
		if ((u.int64_val & ~1) == 0) return u.int64_val & 1;

	case type_unsigned_long_long:
		if ((u.uint64_val & ~1) == 0) return u.uint64_val & 1;
	}

	raise(OverflowException(L"Cannot convert to bool"));
}

int Variant::ToInt() const
{
	ASSERT(m_pType);
	switch (m_pType->GetBaseType()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		return u.int_val;

	case type_unsigned_int:
		if (u.uint_val > INT_MAX) raise(OverflowException("value to large, cannot be converted to int"));
		return u.uint_val;

	case type_long:
		// TODO
		return u.long_val;

	case type_unsigned_long:
		if (u.ulong_val > INT_MAX) raise(OverflowException("value to large, cannot be converted to int"));
		return u.ulong_val;

	case type_unsigned_long_long:
		if (u.ulonglong_val > INT_MAX) raise(OverflowException("value to large, cannot be converted to int"));
		return (int)u.ulonglong_val;

	default:
		raise(OverflowException(L"Cannot convert to int"));
	}
}

unsigned int Variant::ToUInt() const
{
	switch (kind)
	{
	case VARKIND_BOOL:
		return u.bool_val;

	case VARKIND_INT8:
		if (u.int8_val < 0) raise(OverflowException("negative value cannot be converted to unsigned int"));
		return u.int8_val;

	case VARKIND_UINT8:
		return u.uint8_val;

	case VARKIND_INT16:
		if (u.int16_val < 0) raise(OverflowException("negative value cannot be converted to unsigned int"));
		return u.int16_val;

	case VARKIND_UINT16:
		return u.uint16_val;

	case VARKIND_INT32:
		if (u.int32_val < 0) raise(OverflowException("negative value cannot be converted to unsigned int"));
		return u.int32_val;

	case VARKIND_UINT32:
		return u.uint32_val;

	default:
		raise(OverflowException(L"Cannot convert to int"));
	}
}

long Variant::ToLong() const
{
	switch (kind)
	{
	case VARKIND_BOOL:
		return u.bool_val;

	case VARKIND_INT8:
		return u.int8_val;

	case VARKIND_UINT8:
		return u.uint8_val;

	case VARKIND_INT16:
		return u.int16_val;

	case VARKIND_UINT16:
		return u.uint16_val;

	case VARKIND_INT32:
		return u.int32_val;

#if LONG_MAX == _I64_MAX

	case VARKIND_UINT32:
		return u.uint32_val;

	case VARKIND_INT64:
		return u.int64_val;
#endif

	default:
		raise(OverflowException(L"Cannot convert to long"));
	}
}

unsigned long Variant::ToULong() const
{
	ASSERT(m_pType);
	switch (m_pType->GetStripped()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		if (u.schar_val < 0) raise(OverflowException("negative value cannot be converted to unsigned long"));
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		if (u.short_val < 0) raise(OverflowException("negative value cannot be converted to unsigned long"));
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		if (u.int_val < 0) raise(OverflowException("negative value cannot be converted to unsigned long"));
		return u.int_val;

	case type_unsigned_int:
		return u.uint_val;

	case type_long_long:
		if (u.longlong_val < 0) raise(OverflowException("negative value cannot be converted to unsigned long"));
#if ULONG_MAX < _I64_MAX
		if (u.longlong_val > ULONG_MAX) raise(OverflowException("value too large to be converted to unsigned long"));
#endif
		return (unsigned long)u.longlong_val;

	case type_unsigned_long_long:
#if ULONG_MAX < _UI64_MAX
		if (u.ulonglong_val > ULONG_MAX) raise(OverflowException("value too large to be converted to unsigned long"));
#endif
		return (unsigned long)u.ulonglong_val;

	default:
		raise(OverflowException(L"Cannot convert to unsigned long"));
	}
}

long long Variant::ToInt64() const
{
	ASSERT(m_pType);

	switch (m_pType->GetStripped()->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		return u.schar_val;

	case type_unsigned_char:
		return u.uchar_val;

	case type_short:
		return u.short_val;

	case type_unsigned_short:
		return u.ushort_val;

	case type_int:
		return u.int_val;

	case type_unsigned_int:
		return u.uint_val;

	case type_long:
		return u.long_val;

	case type_unsigned_long:
#if ULONG_MAX > _I64_MAX
		if (u.ulong_val > _I64_MAX) raise(OverflowException("value too large to be converted to int64"));
#endif
		return u.ulong_val;

	case type_long_long:
		return u.longlong_val;

	case type_unsigned_long_long:
		if (u.ulonglong_val > _I64_MAX) raise(OverflowException("value too large to be converted to int64"));
		return (unsigned long)u.ulonglong_val;

	default:
		raise(OverflowException(L"Cannot convert to int64"));
	}
}

float Variant::ToFloat() const
{
	ASSERT(m_pType);
	switch (m_pType->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		return u.int8_val;

	case type_unsigned_char:
		return u.uint8_val;

	case type_short:
		return u.int16_val;

	case type_unsigned_short:
		return u.uint16_val;

	case type_int:
		return (float)u.int32_val;

	case type_unsigned_int:
		ASSERT(0);
		return (float)u.uint32_val;

	case type_long_long:
		ASSERT(0);
		return (float)u.int64_val;

	case type_unsigned_long_long:
		ASSERT(0);
		return (float)u.uint64_val;

	case type_float:
		return u.float32_val;
		
	case type_double:
		return (float)u.float64_val;

	default:
		raise(OverflowException(L"Cannot convert to float"));
	}
}

double Variant::ToDouble() const
{
	ASSERT(m_pType);
	switch (m_pType->get_Kind())
	{
	case type_bool:
		return u.bool_val;

	case type_signed_char:
		return u.int8_val;

	case type_unsigned_char:
		return u.uint8_val;

	case type_short:
		return u.int16_val;

	case type_unsigned_short:
		return u.uint16_val;

	case type_int:
		return (float)u.int32_val;

	case type_unsigned_int:
		return (float)u.uint32_val;

	case type_long_long:
		return (float)u.int64_val;

	case type_unsigned_long_long:
		return (float)u.uint64_val;

	case type_float:
		return u.float32_val;
		
	case type_double:
		return u.float64_val;

	default:
		raise(OverflowException(L"Cannot convert to double"));
	}
}

bool Variant::operator == (bool value) const
{
	return (bool)*this == value;
}

bool Variant::operator == (char value) const
{
	return (int)*this == value;
}

bool Variant::operator == (wchar_t value) const
{
	return (int)*this == value;
}

bool Variant::operator == (signed char value) const
{
	return (int)*this == value;
}

bool Variant::operator == (unsigned char value) const
{
	return (int)*this == value;
}

bool Variant::operator == (short value) const
{
	return (int)*this == value;
}

bool Variant::operator == (unsigned short value) const
{
	return (int)*this == value;
}

bool Variant::operator == (int value) const
{
	return (int)*this == value;
}

bool Variant::operator == (unsigned int value) const
{
	return (unsigned int)*this == value;
}

bool Variant::operator == (long value) const
{
	return (long)*this == value;
}

bool Variant::operator == (unsigned long value) const
{
	return (unsigned long)*this == value;
}

bool Variant::operator == (long long value) const
{
	return (long long)*this == value;
}

bool Variant::operator == (unsigned long long value) const
{
	return (unsigned long long)*this == value;
}

bool Variant::operator < (bool value) const
{
	return (bool)*this < value;
}

bool Variant::operator < (char value) const
{
	return (int)*this < value;
}

bool Variant::operator < (wchar_t value) const
{
	return (int)*this < value;
}

bool Variant::operator < (signed char value) const
{
	return (int)*this < value;
}

bool Variant::operator < (unsigned char value) const
{
	return (int)*this < value;
}

bool Variant::operator < (short value) const
{
	return (int)*this < value;
}

bool Variant::operator < (unsigned short value) const
{
	return (int)*this < value;
}

bool Variant::operator < (int value) const
{
	return (int)*this < value;
}

bool Variant::operator < (unsigned int value) const
{
	return (unsigned int)*this < value;
}

bool Variant::operator < (long value) const
{
	return (long)*this < value;
}

bool Variant::operator < (unsigned long value) const
{
	return (unsigned long)*this < value;
}

bool Variant::operator < (long long value) const
{
	return (long long)*this < value;
}

bool Variant::operator < (unsigned long long value) const
{
	return (unsigned long long)*this < value;
}

Variant& Variant::operator ++ ()
{
	if (m_pType)
	{
		switch (m_pType->get_Kind())
		{
		case type_signed_char:
			++u.int8_val;
			break;

		case type_unsigned_char:
			++u.uint8_val;
			break;

		case type_short:
			++u.int16_val;
			break;

		case type_unsigned_short:
			++u.uint16_val;
			break;

		case type_int:
			++u.int32_val;
			break;

		case type_unsigned_int:
			++u.uint32_val;
			break;

		case type_long:
			++u.long_val;
			break;

		case type_unsigned_long:
			++u.ulong_val;
			break;

		case type_long_long:
			++u.int64_val;
			break;

		case type_unsigned_long_long:
			++u.uint64_val;
			break;

		default:
			raise(SystemException("wrong type"));
		}
	}
	else
	{
		VERIFY(0);
	}

	return *this;
}

Variant& Variant::operator -- ()
{
	if (m_pType)
	{
		switch (m_pType->get_Kind())
		{
		case type_signed_char:
			--u.int8_val;
			break;

		case type_unsigned_char:
			--u.uint8_val;
			break;

		case type_short:
			--u.int16_val;
			break;

		case type_unsigned_short:
			--u.uint16_val;
			break;

		case type_int:
			--u.int32_val;
			break;

		case type_unsigned_int:
			--u.uint32_val;
			break;

		case type_long:
			--u.long_val;
			break;

		case type_unsigned_long:
			--u.ulong_val;
			break;

		case type_long_long:
			--u.int64_val;
			break;

		case type_unsigned_long_long:
			--u.uint64_val;
			break;

		default:
			raise(SystemException("wrong type"));
		}
	}
	else
	{
		VERIFY(0);
	}

	return *this;
}

Variant Variant::operator ++ (int)
{
	Variant v(*this);
	this->operator++();
	return v;
}

Variant Variant::operator -- (int)
{
	Variant v(*this);
	this->operator--();
	return v;
}

String Variant::ToString() const
{
	if (m_pType)
	{
		switch (m_pType->GetStripped()->get_Kind())
		{
		case type_null:
			return "null";

		case type_void:
			return "undefined";

		case type_bool:
			return u.bool_val? "true": "false";

			/*
		case type_char:
			return "'" + String::FromNumber(u.int8_val);
			*/

		case type_signed_char:
			return String::FromNumber(u.schar_val);

		case type_unsigned_char:
			return String::FromNumber(u.uchar_val);

		case type_short:
			return String::FromNumber(u.short_val);

		case type_unsigned_short:
			return String::FromNumber(u.ushort_val);

		case type_int:
			return String::FromNumber(u.int_val);

		case type_unsigned_int:
			return String::FromNumber(u.uint_val);

		case type_long:
			return String::FromNumber(u.long_val);

		case type_unsigned_long:
			return String::FromNumber(u.ulong_val);

		case type_long_long:
			return String::FromNumber(u.longlong_val);

		case type_unsigned_long_long:
			return String::FromNumber(u.ulonglong_val);

		case type_float:
			return String::FromNumber(u.float_val);

		case type_double:
		case type_long_double:
			return String::FromNumber(u.double_val);

		case type_enum:
			{
				long long value;
				EnumType* pEnum = static_cast<EnumType*>(m_pType);
				if (pEnum->m_baseType)
				{
					switch (pEnum->m_baseType->get_Kind())
					{
					case type_bool:
						value = u.bool_val;
						break;

					case type_char:
						value = u.char_val;
						break;

					case type_wchar_t:
						value = u.wchar_val;
						break;

					case type_signed_char:
						value = u.schar_val;
						break;

					case type_unsigned_char:
						value = u.uchar_val;
						break;

					case type_short:
						value = u.short_val;
						break;

					case type_unsigned_short:
						value = u.ushort_val;
						break;

					case type_int:
						value = u.int_val;
						break;

					case type_unsigned_int:
						value = u.uint_val;
						break;

					case type_long:
						value = u.long_val;
						break;

					case type_unsigned_long:
						value = u.ulong_val;
						break;

					case type_long_long:
						value = u.longlong_val;
						break;

					default:
						raise(SystemException("Unsupported enum baseType"));
					}
				}
				else
				{
					value = u.int_val;
				}

				return pEnum->GetItemL(value)->m_name;
			}
			break;

		case type_class:
			{
				if (m_pType->GetClass()->IsPolymorphic())
				{
					Object* obj = __dynamic_cast<Object*>(m_pObject);
					if (obj)
						return obj->ToString();
					else
						return "TODO to string";
				}
				else if (m_pType == typeid(String))
				{
					return *(String*)&m_structptr;
				}
				else
				{
					IO::StringWriter writer;
					PrintValue(writer, m_pType, (byte*)m_structptr, ",");
					return writer.str();
				}
			}
			break;

		case type_pointer:
		case type_reference:
			{
				return "0x" + String::FromNumber((ULONG_PTR)m_structptr, 16);
			}
			break;

		default:
			ASSERT(0);
		}
	}

	switch (kind)
	{
	case VARKIND_UNDEFINED:
		return L"undefined";
		break;
		/*
	case VARKIND_BOOL:
		return u.boolean;
		*/

	case VARKIND_INT8:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%d", u.int8_val);
			return string_copy(buf);
		}
		break;

	case VARKIND_UINT8:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%u", u.uint8_val);
			return buf;
		}
		break;

	case VARKIND_INT16:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%d", u.int16_val);
			return buf;
		}
		break;

	case VARKIND_UINT16:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%u", u.uint16_val);
			return buf;
		}
		break;

	case VARKIND_INT32:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%d", u.int32_val);
			return buf;
		}
		break;

	case VARKIND_UINT32:
		{
			WCHAR buf[32];
			swprintf_s(buf, L"%u", u.uint32_val);
			return string_copy(buf);
		}
		break;

		/*

	case VARKIND_INT64:
		return (double)u.int64;

	case VARKIND_FLOAT32:
		return u.float32;
		
	case VARKIND_FLOAT64:
		return u.float64;
		*/

//	case VARKIND_STRINGA:
//		return ((StringObject*)m_pObject);

	case VARKIND_NULL:
		return L"null";

	case VARKIND_OBJECT:
		return m_pObject->ToString();
		/*
	case VARKIND_STRINGW:
		{
			return (StringW*)m_pObject;
		}
		break;
		*/

	default:
		raise(Exception(L"Invalid Variant"));
		ASSERT(0);
	}

	return null;
}

Object* Variant::operator -> () const
{
	if (m_pType->get_Kind() != type_class)
	{
		raise(Exception("not an object"));
	}

	if (m_pObject == NULL)
	{
		raise(Exception("accessing null object"));
	}

	return m_pObject;
}

LFCEXT IO::TextWriter& WriteToStream(IO::TextWriter& writer, const Variant& v)
{
	writer << v.ToString();
	return writer;
}

}	// System
