#include "stdafx.h"
#include "X3D2.h"

namespace System
{
namespace x3d
{

TypedX3DFieldDefinition<SFString>* X3DViewpointNode::get_descriptionFieldDef()
{
	static TypedX3DFieldDefinition<SFString> def("description", SAIFieldAccess_initializeOnly, offsetof(X3DViewpointNode, m_description));
	return &def;
}

TypedX3DFieldDefinition<SFVec3f>* X3DViewpointNode::get_positionFieldDef()
{
	static TypedX3DFieldDefinition<SFVec3f> def("position", SAIFieldAccess_inputOutput, offsetof(X3DViewpointNode, m_position), Vec3f(0, 0, 10));
	return &def;
}

TypedX3DFieldDefinition<SFVec3f>* X3DViewpointNode::get_centerOfRotationFieldDef()
{
	static TypedX3DFieldDefinition<SFVec3f> def("centerOfRotation", SAIFieldAccess_inputOutput, offsetof(X3DViewpointNode, m_centerOfRotation), Vec3f(0, 0, 0));
	return &def;
}

TypedX3DFieldDefinition<SFRotation>* X3DViewpointNode::get_orientationFieldDef()
{
	static TypedX3DFieldDefinition<SFRotation> def("orientation", SAIFieldAccess_inputOutput, offsetof(X3DViewpointNode, m_orientation), Rotation(Vec3f(0, 0, 1), 0));
	return &def;
}

TypedX3DFieldDefinition<SFBool>* X3DViewpointNode::get_jumpFieldDef()
{
	static TypedX3DFieldDefinition<SFBool> def("jump", SAIFieldAccess_inputOutput, offsetof(X3DViewpointNode, m_jump), false);
	return &def;
}

NodeType* X3DViewpointNode::GetNodeType()
{
	static X3DFieldDefinition* fields[] =
	{
		get_descriptionFieldDef(),
		get_positionFieldDef(),
		get_centerOfRotationFieldDef(),
		get_orientationFieldDef(),
		get_jumpFieldDef(),
	};

	static NodeType nodeType(NULL, typeid(X3DViewpointNode), fields, _countof(fields), baseClass::GetNodeType());
	return &nodeType;
}

X3DViewpointNode::X3DViewpointNode(NodeType* nodeType) : X3DBindableNode(nodeType),
	m_description(new SFString(get_descriptionFieldDef(), this)),
	m_position(new SFVec3f(get_positionFieldDef(), this)),
	m_orientation(new SFRotation(get_orientationFieldDef(), this)),
	m_centerOfRotation(new SFVec3f(get_centerOfRotationFieldDef(), this)),
	m_jump(new SFBool(get_jumpFieldDef(), this))
{
}

D3DXMATRIX X3DViewpointNode::GetViewMatrix()
{
	D3DXMATRIX m;

	AxisAngle orientation = getOrientation();
	Vec3f position = getPosition();
	Vec3f axis = orientation.m_axis;

	m = MatrixTranslation(position);
	m *= MatrixRotationAxis(axis, orientation.m_angle);

	return m;
}

D3DXMATRIX X3DViewpointNode::GetViewMatrixI()
{
	D3DXMATRIX m;

	AxisAngle orientation = getOrientation();
	Vec3f position = getPosition();
	Vec3f axis = orientation.m_axis;

	m = MatrixTranslation(position);
	m = MatrixRotationAxis(axis, orientation.m_angle) * m;

	return m;
}

void X3DViewpointNode::DrawOverlay(X3DDrawContext* pDC)
{
	// TODO: not here
	if (m_selected)
	{
		pDC->m_renderContext->PushModelView(pDC->m_renderContext->modelViewMatrix() * MatrixTranslation(getPosition()));

		DrawAxis(pDC);

		pDC->m_renderContext->PopMatrix();
	//	pDC->m_renderContext->GetRT()->m_d3d10->m_device->OMSetDepthStencilState(depthStencilState, stencilRef);
	}
}

int X3DViewpointNode::HitTest(const D3DXMATRIX& projection, const D3DXMATRIX& view, const D3DXMATRIX& model, const D3D10_VIEWPORT& vp, int type, Vec2f mousepos, Vec3f pos, IHitTest* hitTest)
{
	D3DXVECTOR3 location(getPosition());
//	D3DXVECTOR4 v;

//	D3DXVec3Transform(&v, &location, &modelView);

	D3DXVECTOR3 out;
	D3DXVec3Project(&out, &location, &vp, &projection, &view, &model);

	if (fabs(mousepos[0]-out.x) < 3 &&
		fabs(mousepos[1]-out.y) < 3)
	{
		hitTest->OnHit(this, type, *(Vec3f*)&out);
		return 1;
	}

	return 0;
}

}	// x3d
}	// System
