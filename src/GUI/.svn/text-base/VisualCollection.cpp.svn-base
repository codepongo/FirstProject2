#include "stdafx.h"
#include "GUI2.h"

namespace System
{
namespace Gui
{

VisualCollection::VisualCollection()
{
}

VisualCollection::VisualCollection(Object* owner) : m_owner(owner)
{
}

const Type_Info& VisualCollection::GetItemType() const
{
	return typeid(Visual);
}

size_t VisualCollection::GetCount()
{
	return m_items.size();
}

void VisualCollection::Clear()
{
	m_items.clear();
}

void VisualCollection::AddObject(Object* element)
{
	Visual* item = dynamic_cast<Visual*>(element);
	if (item == NULL)
	{
		ASSERT(0);
		raise(ArgumentException(WSTR("Not a Visual")));
	}

	Add(item);
}

Object* VisualCollection::get_ObjectItem(size_t index)
{
	ASSERT(0);
	/*
	if (index >= m_items.size())
	{
		raise(ArgumentOutOfRangeException());
	}
	return m_items[index];
	*/
	return NULL;
}

void VisualCollection::Add(Visual* element)
{
	if (element == NULL)
	{
		raise(ArgumentNullException());
	}

	size_t position = m_items.size();
	UIElement* elementOwner = dynamic_cast<UIElement*>(m_owner);
	if (elementOwner)
	{
		elementOwner->OnAddChild(this, element);
		element->set_ChildPosition(position);
	}

	m_items.push_back(element);
}

String VisualCollection::ToString()
{
	vector<Visual*>::iterator it = m_items.begin();
	while (it != m_items.end())
	{
		Visual* item = *it;
		++it;
	}
	return "TODO";
}

}	// Gui
}	// System
